# An example of ClusterConfig object using an existing VPC:
--- 
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: budibase-eks-production
  region: eu-west-1

vpc:
  id: "vpc-00f3b04043fcb4a20"  # (optional, must match VPC ID used for each subnet below)
  cidr: "10.0.0.0/16"       # (optional, must match CIDR used by the given VPC)
  subnets:
    # must provide 'private' and/or 'public' subnets by availibility zone as shown
    public:
      # These are the ingress subnets in our AWS VPC
      eu-west-1a:
        id: "subnet-07b5636123dbe165c"
        cidr: "10.0.0.0/24" # (optional, must match CIDR used by the given subnet)
      eu-west-1b:
        id: "subnet-00f5e8f2c0be35555"
        cidr: "10.0.1.0/24"  # (optional, must match CIDR used by the given subnet)
      eu-west-1c:
        id: "subnet-048253929a19f3ec1"
        cidr: "10.0.2.0/24"   # (optional, must match CIDR used by the given subnet)

    private:
      # These are the private application subnets in our AWS VPC
      eu-west-1a:
        id: "subnet-00162235895e4c004"
        cidr: "10.0.3.0/24" # (optional, must match CIDR used by the given subnet)
      eu-west-1b:
        id: "subnet-029f20ce9f43c7911"
        cidr: "10.0.4.0/24"  # (optional, must match CIDR used by the given subnet)
      eu-west-1c:
        id: "subnet-06280b6ab9d618a44"
        cidr: "10.0.5.0/24"   # (optional, must match CIDR used by the given subnet)

nodeGroups:
  - name: ng-1
    instanceType: m5.large
    desiredCapacity: 1
    ssh: 
      publicKeyName: budibase-eks-prod